using Basic
using Test

include("Utils/Utils.jl")


pck = parse_pck("iau2009.tpc2")
ids2names = Dict(199 => :Mercury, 299 => :Venus, 599 => :Jupiter, 699 => :Saturn)

for b in values(ids2names)
    @eval begin 
        struct $b end 
    end
end

using Statistics: mean

function body_radius_writer(file::String, pck::Dict, id2name::Dict )
    template(body, func, val) = """
    @inline $func(::$body) = $val
    """

    open(file, "w") do f
        write(f, "# Automatically generated by $(basename(@__FILE__)), do not edit!\n\n")
        for id in keys(id2name) 
            body = replace(titlecase(id2name[id]), r"\s"=>"")
            body = body == "Moon" ? "Luna" : body
            r = pck[Symbol(join(["BODY$id", "RADII"], "_"))]
            subplan, along, polar = r
            write(f, template(body, "subplanetary_radius", subplan))
            write(f, template(body, "along_orbit_radius", along))
            if subplan == along
                write(f, template(body, "equatorial_radius", subplan))
            end
            write(f, template(body, "polar_radius", polar))
            write(f, template(body, "mean_radius", mean(r)))
        end 
    end
end

using Basic
using OrderedCollections
using BenchmarkTools

pck = load([TPC("temp/pck00010.tpc"), TPC("temp/gm_de431.tpc")])

using JSON3
using SHA

data = load(JSON("config.json"))

DEF_NAIF2NAME = joinpath(@__DIR__, "..", "res", "naif2name.txt")
ids = match.(r"(?<id>[0-9]{1,})\W{1,}(?<name>\w{1,})", readlines(path))

to_symbol(s) = Symbol(join(uppercasefirst.(lowercase.(split(s, r"[_, \W]")))))
naifid2name = Dict(
    typeof(r) == RegexMatch ? parse(Int, r[:id]) =>  to_symbol(r[:name]) : () for r in ids
)